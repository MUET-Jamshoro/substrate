// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-sgmchhtv-project-145-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, i: u32, s: u32, ) -> Weight;
	fn instantiate(i: u32, s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_caller_is_root(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_byte(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_byte(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_byte(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_debug_message_per_byte(i: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_byte(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_byte(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_byte(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_byte(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_byte(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_byte(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_byte(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_input_salt_byte(t: u32, i: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_byte(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_byte(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_byte(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_byte(n: u32, ) -> Weight;
	fn seal_sr25519_verify_per_byte(n: u32, ) -> Weight;
	fn seal_sr25519_verify(r: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn seal_reentrance_count(r: u32, ) -> Weight;
	fn seal_account_reentrance_count(r: u32, ) -> Weight;
	fn seal_instantiation_nonce(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_per_local(l: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Contracts DeletionQueueCounter (r:1 w:0)
	/// Proof: Contracts DeletionQueueCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 2_618_000 picoseconds.
		Weight::from_parts(2_836_000, 1594)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `488 + k * (69 ±0)`
		//  Estimated: `478 + k * (70 ±0)`
		// Minimum execution time: 14_078_000 picoseconds.
		Weight::from_parts(14_500_000, 478)
			// Standard Error: 1_093
			.saturating_add(Weight::from_parts(1_209_275, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: Contracts PristineCode (r:1 w:0)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238 + c * (1 ±0)`
		//  Estimated: `3708 + c * (1 ±0)`
		// Minimum execution time: 40_392_000 picoseconds.
		Weight::from_parts(46_126_735, 3708)
			// Standard Error: 43
			.saturating_add(Weight::from_parts(59_298, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[0, 125952]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `707`
		//  Estimated: `6656 + c * (1 ±0)`
		// Minimum execution time: 379_117_000 picoseconds.
		Weight::from_parts(402_116_789, 6656)
			// Standard Error: 32
			.saturating_add(Weight::from_parts(42_792, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `270`
		//  Estimated: `8659`
		// Minimum execution time: 3_925_966_000 picoseconds.
		Weight::from_parts(453_938_244, 8659)
			// Standard Error: 459
			.saturating_add(Weight::from_parts(123_147, 0).saturating_mul(c.into()))
			// Standard Error: 27
			.saturating_add(Weight::from_parts(1_516, 0).saturating_mul(i.into()))
			// Standard Error: 27
			.saturating_add(Weight::from_parts(1_954, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `482`
		//  Estimated: `6408`
		// Minimum execution time: 2_137_184_000 picoseconds.
		Weight::from_parts(434_899_067, 6408)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(1_734, 0).saturating_mul(i.into()))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(1_832, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `759`
		//  Estimated: `6699`
		// Minimum execution time: 208_516_000 picoseconds.
		Weight::from_parts(216_344_000, 6699)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1 w:1)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 372_244_000 picoseconds.
		Weight::from_parts(393_257_592, 3574)
			// Standard Error: 60
			.saturating_add(Weight::from_parts(121_002, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1 w:1)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3720`
		// Minimum execution time: 35_986_000 picoseconds.
		Weight::from_parts(38_173_000, 3720)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:2 w:2)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `570`
		//  Estimated: `8985`
		// Minimum execution time: 36_423_000 picoseconds.
		Weight::from_parts(37_545_000, 8985)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781 + r * (6 ±0)`
		//  Estimated: `6722 + r * (6 ±0)`
		// Minimum execution time: 343_411_000 picoseconds.
		Weight::from_parts(360_741_256, 6722)
			// Standard Error: 629
			.saturating_add(Weight::from_parts(357_299, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1601 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839 + r * (240 ±0)`
		//  Estimated: `6743 + r * (2715 ±0)`
		// Minimum execution time: 342_325_000 picoseconds.
		Weight::from_parts(203_764_212, 6743)
			// Standard Error: 5_811
			.saturating_add(Weight::from_parts(3_700_524, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2715).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1601 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `831 + r * (244 ±0)`
		//  Estimated: `6747 + r * (2719 ±0)`
		// Minimum execution time: 345_307_000 picoseconds.
		Weight::from_parts(202_519_887, 6747)
			// Standard Error: 6_074
			.saturating_add(Weight::from_parts(4_702_128, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2719).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `788 + r * (6 ±0)`
		//  Estimated: `6730 + r * (6 ±0)`
		// Minimum execution time: 347_700_000 picoseconds.
		Weight::from_parts(358_685_044, 6730)
			// Standard Error: 513
			.saturating_add(Weight::from_parts(450_253, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (3 ±0)`
		//  Estimated: `6723 + r * (3 ±0)`
		// Minimum execution time: 338_168_000 picoseconds.
		Weight::from_parts(354_071_257, 6723)
			// Standard Error: 326
			.saturating_add(Weight::from_parts(193_608, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller_is_root(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `668 + r * (3 ±0)`
		//  Estimated: `6608 + r * (3 ±0)`
		// Minimum execution time: 326_563_000 picoseconds.
		Weight::from_parts(340_265_212, 6608)
			// Standard Error: 325
			.saturating_add(Weight::from_parts(170_672, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_address(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `782 + r * (6 ±0)`
		//  Estimated: `6724 + r * (6 ±0)`
		// Minimum execution time: 343_057_000 picoseconds.
		Weight::from_parts(356_255_155, 6724)
			// Standard Error: 807
			.saturating_add(Weight::from_parts(362_939, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (6 ±0)`
		//  Estimated: `6719 + r * (6 ±0)`
		// Minimum execution time: 343_528_000 picoseconds.
		Weight::from_parts(357_742_113, 6719)
			// Standard Error: 611
			.saturating_add(Weight::from_parts(561_885, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `922 + r * (6 ±0)`
		//  Estimated: `6846 + r * (6 ±0)`
		// Minimum execution time: 341_905_000 picoseconds.
		Weight::from_parts(375_082_439, 6846)
			// Standard Error: 3_803
			.saturating_add(Weight::from_parts(1_668_755, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `792 + r * (6 ±0)`
		//  Estimated: `6741 + r * (6 ±0)`
		// Minimum execution time: 340_647_000 picoseconds.
		Weight::from_parts(358_078_522, 6741)
			// Standard Error: 962
			.saturating_add(Weight::from_parts(349_961, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790 + r * (6 ±0)`
		//  Estimated: `6739 + r * (6 ±0)`
		// Minimum execution time: 342_314_000 picoseconds.
		Weight::from_parts(363_920_355, 6739)
			// Standard Error: 694
			.saturating_add(Weight::from_parts(340_575, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787 + r * (6 ±0)`
		//  Estimated: `6737 + r * (6 ±0)`
		// Minimum execution time: 341_078_000 picoseconds.
		Weight::from_parts(353_726_745, 6737)
			// Standard Error: 709
			.saturating_add(Weight::from_parts(346_342, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_now(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (6 ±0)`
		//  Estimated: `6723 + r * (6 ±0)`
		// Minimum execution time: 344_314_000 picoseconds.
		Weight::from_parts(357_764_230, 6723)
			// Standard Error: 504
			.saturating_add(Weight::from_parts(347_089, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// Proof: TransactionPayment NextFeeMultiplier (max_values: Some(1), max_size: Some(16), added: 511, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `852 + r * (14 ±0)`
		//  Estimated: `6785 + r * (14 ±0)`
		// Minimum execution time: 341_655_000 picoseconds.
		Weight::from_parts(372_186_405, 6785)
			// Standard Error: 1_225
			.saturating_add(Weight::from_parts(1_515_085, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 14).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `745 + r * (4 ±0)`
		//  Estimated: `6687 + r * (4 ±0)`
		// Minimum execution time: 169_950_000 picoseconds.
		Weight::from_parts(185_946_462, 6687)
			// Standard Error: 342
			.saturating_add(Weight::from_parts(147_677, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780 + r * (6 ±0)`
		//  Estimated: `6724 + r * (6 ±0)`
		// Minimum execution time: 344_778_000 picoseconds.
		Weight::from_parts(362_555_199, 6724)
			// Standard Error: 412
			.saturating_add(Weight::from_parts(287_182, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_input_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `784`
		//  Estimated: `6724`
		// Minimum execution time: 345_057_000 picoseconds.
		Weight::from_parts(307_695_645, 6724)
			// Standard Error: 24
			.saturating_add(Weight::from_parts(1_124, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `768 + r * (45 ±0)`
		//  Estimated: `6708 + r * (45 ±0)`
		// Minimum execution time: 335_253_000 picoseconds.
		Weight::from_parts(349_912_075, 6708)
			// Standard Error: 906_548
			.saturating_add(Weight::from_parts(4_851_224, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_return_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778`
		//  Estimated: `6731`
		// Minimum execution time: 341_257_000 picoseconds.
		Weight::from_parts(352_044_939, 6731)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(267, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts DeletionQueueCounter (r:1 w:1)
	/// Proof: Contracts DeletionQueueCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts DeletionQueue (r:0 w:1)
	/// Proof: Contracts DeletionQueue (max_values: None, max_size: Some(142), added: 2617, mode: Measured)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `810 + r * (356 ±0)`
		//  Estimated: `6750 + r * (7781 ±0)`
		// Minimum execution time: 339_648_000 picoseconds.
		Weight::from_parts(353_307_485, 6750)
			// Standard Error: 850_170
			.saturating_add(Weight::from_parts(140_793_614, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((8_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 7781).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_random(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `825 + r * (10 ±0)`
		//  Estimated: `6769 + r * (10 ±0)`
		// Minimum execution time: 346_576_000 picoseconds.
		Weight::from_parts(363_777_038, 6769)
			// Standard Error: 2_162
			.saturating_add(Weight::from_parts(2_026_896, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (10 ±0)`
		//  Estimated: `6723 + r * (10 ±0)`
		// Minimum execution time: 337_852_000 picoseconds.
		Weight::from_parts(360_199_971, 6723)
			// Standard Error: 3_597
			.saturating_add(Weight::from_parts(4_033_875, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:6 w:6)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16384]`.
	fn seal_deposit_event_per_topic_and_byte(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `797 + t * (32 ±0)`
		//  Estimated: `6744 + t * (2508 ±0)`
		// Minimum execution time: 362_333_000 picoseconds.
		Weight::from_parts(362_030_227, 6744)
			// Standard Error: 84_170
			.saturating_add(Weight::from_parts(3_056_095, 0).saturating_mul(t.into()))
			// Standard Error: 23
			.saturating_add(Weight::from_parts(875, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2508).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `777 + r * (7 ±0)`
		//  Estimated: `6721 + r * (7 ±0)`
		// Minimum execution time: 183_010_000 picoseconds.
		Weight::from_parts(192_453_803, 6721)
			// Standard Error: 1_387
			.saturating_add(Weight::from_parts(265_470, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 7).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_debug_message_per_byte(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `125728`
		//  Estimated: `131670`
		// Minimum execution time: 494_600_000 picoseconds.
		Weight::from_parts(464_686_074, 131670)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(1_085, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `845 + r * (292 ±0)`
		//  Estimated: `843 + r * (293 ±0)`
		// Minimum execution time: 343_761_000 picoseconds.
		Weight::from_parts(256_568_537, 843)
			// Standard Error: 10_189
			.saturating_add(Weight::from_parts(6_958_654, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 293).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_set_storage_per_new_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1304`
		//  Estimated: `1280`
		// Minimum execution time: 365_932_000 picoseconds.
		Weight::from_parts(411_656_757, 1280)
			// Standard Error: 66
			.saturating_add(Weight::from_parts(871, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_set_storage_per_old_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1167 + n * (1 ±0)`
		//  Estimated: `1167 + n * (1 ±0)`
		// Minimum execution time: 363_624_000 picoseconds.
		Weight::from_parts(378_169_815, 1167)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(169, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `841 + r * (288 ±0)`
		//  Estimated: `845 + r * (289 ±0)`
		// Minimum execution time: 343_365_000 picoseconds.
		Weight::from_parts(263_636_149, 845)
			// Standard Error: 9_614
			.saturating_add(Weight::from_parts(6_807_182, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 289).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_clear_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1163 + n * (1 ±0)`
		//  Estimated: `1163 + n * (1 ±0)`
		// Minimum execution time: 362_876_000 picoseconds.
		Weight::from_parts(375_291_483, 1163)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(201, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `835 + r * (296 ±0)`
		//  Estimated: `840 + r * (297 ±0)`
		// Minimum execution time: 346_185_000 picoseconds.
		Weight::from_parts(277_964_777, 840)
			// Standard Error: 8_452
			.saturating_add(Weight::from_parts(5_716_692, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_get_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1179 + n * (1 ±0)`
		//  Estimated: `1179 + n * (1 ±0)`
		// Minimum execution time: 364_885_000 picoseconds.
		Weight::from_parts(376_138_678, 1179)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(706, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `856 + r * (288 ±0)`
		//  Estimated: `857 + r * (289 ±0)`
		// Minimum execution time: 343_021_000 picoseconds.
		Weight::from_parts(281_839_963, 857)
			// Standard Error: 7_773
			.saturating_add(Weight::from_parts(5_473_569, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 289).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_contains_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1166 + n * (1 ±0)`
		//  Estimated: `1166 + n * (1 ±0)`
		// Minimum execution time: 360_210_000 picoseconds.
		Weight::from_parts(371_951_293, 1166)
			// Standard Error: 28
			.saturating_add(Weight::from_parts(220, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `829 + r * (296 ±0)`
		//  Estimated: `836 + r * (297 ±0)`
		// Minimum execution time: 345_122_000 picoseconds.
		Weight::from_parts(263_433_243, 836)
			// Standard Error: 9_685
			.saturating_add(Weight::from_parts(6_994_760, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_take_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1180 + n * (1 ±0)`
		//  Estimated: `1180 + n * (1 ±0)`
		// Minimum execution time: 369_389_000 picoseconds.
		Weight::from_parts(381_895_101, 1180)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(681, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: System Account (r:1602 w:1601)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1373 + r * (45 ±0)`
		//  Estimated: `7270 + r * (2520 ±0)`
		// Minimum execution time: 343_451_000 picoseconds.
		Weight::from_parts(283_678_253, 7270)
			// Standard Error: 50_252
			.saturating_add(Weight::from_parts(41_627_199, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2520).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:801 w:801)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:803 w:803)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1140 + r * (276 ±0)`
		//  Estimated: `9332 + r * (2752 ±0)`
		// Minimum execution time: 346_237_000 picoseconds.
		Weight::from_parts(353_690_000, 9332)
			// Standard Error: 84_914
			.saturating_add(Weight::from_parts(317_964_949, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2752).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:736 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:737 w:737)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (502 ±0)`
		//  Estimated: `6727 + r * (2572 ±3)`
		// Minimum execution time: 344_551_000 picoseconds.
		Weight::from_parts(351_310_000, 6727)
			// Standard Error: 104_797
			.saturating_add(Weight::from_parts(312_797_542, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2572).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:3 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:2 w:2)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:4 w:4)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1048576]`.
	fn seal_call_per_transfer_clone_byte(t: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1154 + t * (204 ±0)`
		//  Estimated: `12044 + t * (5154 ±0)`
		// Minimum execution time: 546_476_000 picoseconds.
		Weight::from_parts(167_526_004, 12044)
			// Standard Error: 11_607_363
			.saturating_add(Weight::from_parts(354_398_197, 0).saturating_mul(t.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(1_111, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 5154).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1602 w:1602)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:801 w:801)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:801 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:800 w:800)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:802 w:802)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 800]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1322 + r * (254 ±0)`
		//  Estimated: `7146 + r * (5205 ±0)`
		// Minimum execution time: 819_009_000 picoseconds.
		Weight::from_parts(826_287_000, 7146)
			// Standard Error: 352_432
			.saturating_add(Weight::from_parts(471_664_260, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 5205).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:2 w:2)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 983040]`.
	/// The range of component `s` is `[0, 983040]`.
	fn seal_instantiate_per_transfer_input_salt_byte(t: u32, i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1071 + t * (187 ±0)`
		//  Estimated: `9492 + t * (2634 ±2)`
		// Minimum execution time: 2_381_696_000 picoseconds.
		Weight::from_parts(1_310_635_659, 9492)
			// Standard Error: 12_530_352
			.saturating_add(Weight::from_parts(61_252_725, 0).saturating_mul(t.into()))
			// Standard Error: 19
			.saturating_add(Weight::from_parts(1_013, 0).saturating_mul(i.into()))
			// Standard Error: 19
			.saturating_add(Weight::from_parts(1_249, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(10_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2634).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `777 + r * (8 ±0)`
		//  Estimated: `6718 + r * (8 ±0)`
		// Minimum execution time: 344_201_000 picoseconds.
		Weight::from_parts(357_439_702, 6718)
			// Standard Error: 440
			.saturating_add(Weight::from_parts(414_484, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_sha2_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `785`
		//  Estimated: `6725`
		// Minimum execution time: 344_074_000 picoseconds.
		Weight::from_parts(341_708_846, 6725)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_151, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `779 + r * (8 ±0)`
		//  Estimated: `6721 + r * (8 ±0)`
		// Minimum execution time: 340_127_000 picoseconds.
		Weight::from_parts(356_666_974, 6721)
			// Standard Error: 411
			.saturating_add(Weight::from_parts(810_994, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `6729`
		// Minimum execution time: 344_062_000 picoseconds.
		Weight::from_parts(352_147_271, 6729)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(3_409, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `779 + r * (8 ±0)`
		//  Estimated: `6724 + r * (8 ±0)`
		// Minimum execution time: 340_766_000 picoseconds.
		Weight::from_parts(353_908_780, 6724)
			// Standard Error: 496
			.saturating_add(Weight::from_parts(489_280, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `6733`
		// Minimum execution time: 343_585_000 picoseconds.
		Weight::from_parts(346_684_695, 6733)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_248, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `779 + r * (8 ±0)`
		//  Estimated: `6725 + r * (8 ±0)`
		// Minimum execution time: 341_778_000 picoseconds.
		Weight::from_parts(355_943_845, 6725)
			// Standard Error: 379
			.saturating_add(Weight::from_parts(473_123, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_128_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `6727`
		// Minimum execution time: 347_282_000 picoseconds.
		Weight::from_parts(340_858_747, 6727)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_259, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 125697]`.
	fn seal_sr25519_verify_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `912 + n * (1 ±0)`
		//  Estimated: `6848 + n * (1 ±0)`
		// Minimum execution time: 415_285_000 picoseconds.
		Weight::from_parts(423_037_530, 6848)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(5_904, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_sr25519_verify(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `726 + r * (112 ±0)`
		//  Estimated: `6666 + r * (112 ±0)`
		// Minimum execution time: 343_521_000 picoseconds.
		Weight::from_parts(375_684_879, 6666)
			// Standard Error: 8_578
			.saturating_add(Weight::from_parts(57_306_263, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 112).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `822 + r * (76 ±0)`
		//  Estimated: `6716 + r * (77 ±0)`
		// Minimum execution time: 345_017_000 picoseconds.
		Weight::from_parts(388_197_156, 6716)
			// Standard Error: 12_060
			.saturating_add(Weight::from_parts(46_052_704, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `792 + r * (42 ±0)`
		//  Estimated: `6731 + r * (42 ±0)`
		// Minimum execution time: 343_939_000 picoseconds.
		Weight::from_parts(363_918_148, 6731)
			// Standard Error: 5_726
			.saturating_add(Weight::from_parts(11_855_261, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1536 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1536 w:1536)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1538 w:1538)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (964 ±0)`
		//  Estimated: `8190 + r * (3090 ±7)`
		// Minimum execution time: 342_253_000 picoseconds.
		Weight::from_parts(349_104_000, 8190)
			// Standard Error: 41_317
			.saturating_add(Weight::from_parts(23_556_889, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 3090).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `773 + r * (3 ±0)`
		//  Estimated: `6723 + r * (3 ±0)`
		// Minimum execution time: 340_928_000 picoseconds.
		Weight::from_parts(354_703_936, 6723)
			// Standard Error: 424
			.saturating_add(Weight::from_parts(185_100, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1975 + r * (39 ±0)`
		//  Estimated: `7805 + r * (40 ±0)`
		// Minimum execution time: 343_620_000 picoseconds.
		Weight::from_parts(392_538_877, 7805)
			// Standard Error: 818
			.saturating_add(Weight::from_parts(278_290, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_instantiation_nonce(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776 + r * (3 ±0)`
		//  Estimated: `6723 + r * (3 ±0)`
		// Minimum execution time: 345_881_000 picoseconds.
		Weight::from_parts(358_420_067, 6723)
			// Standard Error: 319
			.saturating_add(Weight::from_parts(156_154, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_668_000 picoseconds.
		Weight::from_parts(1_868_989, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_177, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_180_000 picoseconds.
		Weight::from_parts(2_587_524, 0)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(8_052, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_141_000 picoseconds.
		Weight::from_parts(2_501_785, 0)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(8_012, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_select(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_680_000 picoseconds.
		Weight::from_parts(2_052_116, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(11_581, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_570_000 picoseconds.
		Weight::from_parts(1_905_734, 0)
			// Standard Error: 23
			.saturating_add(Weight::from_parts(16_371, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_678_000 picoseconds.
		Weight::from_parts(2_080_833, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(7_728, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_600_000 picoseconds.
		Weight::from_parts(1_726_421, 0)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(12_472, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_676_000 picoseconds.
		Weight::from_parts(2_017_096, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(15_246, 0).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_695_000 picoseconds.
		Weight::from_parts(1_930_062, 0)
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_651_000 picoseconds.
		Weight::from_parts(2_121_499, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(18_801, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_024_000 picoseconds.
		Weight::from_parts(2_697_083, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(25_870, 0).saturating_mul(r.into()))
	}
	/// The range of component `l` is `[0, 1024]`.
	fn instr_call_per_local(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_716_000 picoseconds.
		Weight::from_parts(1_995_789, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(2_676, 0).saturating_mul(l.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_346_000 picoseconds.
		Weight::from_parts(4_605_068, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_215, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_404_000 picoseconds.
		Weight::from_parts(4_697_493, 0)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(5_537, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_388_000 picoseconds.
		Weight::from_parts(4_718_759, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(7_604, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_813_000 picoseconds.
		Weight::from_parts(2_168_184, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(9_281, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_783_000 picoseconds.
		Weight::from_parts(2_303_511, 0)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(9_625, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_116_000 picoseconds.
		Weight::from_parts(2_507_015, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(5_582, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 16]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_707_000 picoseconds.
		Weight::from_parts(990_556, 0)
			// Standard Error: 139_155
			.saturating_add(Weight::from_parts(18_600_506, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_702_000 picoseconds.
		Weight::from_parts(1_913_113, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_058, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_635_000 picoseconds.
		Weight::from_parts(1_888_810, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_066, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_614_000 picoseconds.
		Weight::from_parts(1_859_500, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(6_080, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_655_000 picoseconds.
		Weight::from_parts(1_907_535, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_090, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_588_000 picoseconds.
		Weight::from_parts(1_916_999, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(6_118, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_633_000 picoseconds.
		Weight::from_parts(1_911_425, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_098, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_608_000 picoseconds.
		Weight::from_parts(1_811_044, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_073, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_677_000 picoseconds.
		Weight::from_parts(1_929_457, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(8_925, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_632_000 picoseconds.
		Weight::from_parts(1_960_901, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(8_488, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_628_000 picoseconds.
		Weight::from_parts(1_979_142, 0)
			// Standard Error: 35
			.saturating_add(Weight::from_parts(8_314, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_602_000 picoseconds.
		Weight::from_parts(1_963_485, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(8_387, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_537_000 picoseconds.
		Weight::from_parts(1_964_507, 0)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(8_445, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_685_000 picoseconds.
		Weight::from_parts(1_902_057, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(8_903, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_615_000 picoseconds.
		Weight::from_parts(1_915_990, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(8_539, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_570_000 picoseconds.
		Weight::from_parts(2_120_953, 0)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(8_324, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_611_000 picoseconds.
		Weight::from_parts(2_070_405, 0)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(8_423, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_665_000 picoseconds.
		Weight::from_parts(1_986_591, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(8_894, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_612_000 picoseconds.
		Weight::from_parts(1_924_368, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_544, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_624_000 picoseconds.
		Weight::from_parts(1_961_302, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_503, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_653_000 picoseconds.
		Weight::from_parts(1_985_918, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_493, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_607_000 picoseconds.
		Weight::from_parts(1_950_489, 0)
			// Standard Error: 43
			.saturating_add(Weight::from_parts(7_859, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_636_000 picoseconds.
		Weight::from_parts(2_317_588, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(7_600, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_605_000 picoseconds.
		Weight::from_parts(2_280_861, 0)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(7_853, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_624_000 picoseconds.
		Weight::from_parts(2_271_172, 0)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(7_449, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_638_000 picoseconds.
		Weight::from_parts(1_851_086, 0)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(8_574, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_638_000 picoseconds.
		Weight::from_parts(1_986_255, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_644, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_584_000 picoseconds.
		Weight::from_parts(2_025_758, 0)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(8_559, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_728_000 picoseconds.
		Weight::from_parts(1_983_576, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_555, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_669_000 picoseconds.
		Weight::from_parts(1_973_175, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_518, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_670_000 picoseconds.
		Weight::from_parts(1_863_441, 0)
			// Standard Error: 18
			.saturating_add(Weight::from_parts(8_619, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_578_000 picoseconds.
		Weight::from_parts(1_980_063, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_525, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_596_000 picoseconds.
		Weight::from_parts(1_961_053, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_529, 0).saturating_mul(r.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Contracts DeletionQueueCounter (r:1 w:0)
	/// Proof: Contracts DeletionQueueCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 2_618_000 picoseconds.
		Weight::from_parts(2_836_000, 1594)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `488 + k * (69 ±0)`
		//  Estimated: `478 + k * (70 ±0)`
		// Minimum execution time: 14_078_000 picoseconds.
		Weight::from_parts(14_500_000, 478)
			// Standard Error: 1_093
			.saturating_add(Weight::from_parts(1_209_275, 0).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: Contracts PristineCode (r:1 w:0)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238 + c * (1 ±0)`
		//  Estimated: `3708 + c * (1 ±0)`
		// Minimum execution time: 40_392_000 picoseconds.
		Weight::from_parts(46_126_735, 3708)
			// Standard Error: 43
			.saturating_add(Weight::from_parts(59_298, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[0, 125952]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `707`
		//  Estimated: `6656 + c * (1 ±0)`
		// Minimum execution time: 379_117_000 picoseconds.
		Weight::from_parts(402_116_789, 6656)
			// Standard Error: 32
			.saturating_add(Weight::from_parts(42_792, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `270`
		//  Estimated: `8659`
		// Minimum execution time: 3_925_966_000 picoseconds.
		Weight::from_parts(453_938_244, 8659)
			// Standard Error: 459
			.saturating_add(Weight::from_parts(123_147, 0).saturating_mul(c.into()))
			// Standard Error: 27
			.saturating_add(Weight::from_parts(1_516, 0).saturating_mul(i.into()))
			// Standard Error: 27
			.saturating_add(Weight::from_parts(1_954, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `482`
		//  Estimated: `6408`
		// Minimum execution time: 2_137_184_000 picoseconds.
		Weight::from_parts(434_899_067, 6408)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(1_734, 0).saturating_mul(i.into()))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(1_832, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `759`
		//  Estimated: `6699`
		// Minimum execution time: 208_516_000 picoseconds.
		Weight::from_parts(216_344_000, 6699)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1 w:1)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 372_244_000 picoseconds.
		Weight::from_parts(393_257_592, 3574)
			// Standard Error: 60
			.saturating_add(Weight::from_parts(121_002, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1 w:1)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3720`
		// Minimum execution time: 35_986_000 picoseconds.
		Weight::from_parts(38_173_000, 3720)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:2 w:2)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `570`
		//  Estimated: `8985`
		// Minimum execution time: 36_423_000 picoseconds.
		Weight::from_parts(37_545_000, 8985)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781 + r * (6 ±0)`
		//  Estimated: `6722 + r * (6 ±0)`
		// Minimum execution time: 343_411_000 picoseconds.
		Weight::from_parts(360_741_256, 6722)
			// Standard Error: 629
			.saturating_add(Weight::from_parts(357_299, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1601 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839 + r * (240 ±0)`
		//  Estimated: `6743 + r * (2715 ±0)`
		// Minimum execution time: 342_325_000 picoseconds.
		Weight::from_parts(203_764_212, 6743)
			// Standard Error: 5_811
			.saturating_add(Weight::from_parts(3_700_524, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2715).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1601 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `831 + r * (244 ±0)`
		//  Estimated: `6747 + r * (2719 ±0)`
		// Minimum execution time: 345_307_000 picoseconds.
		Weight::from_parts(202_519_887, 6747)
			// Standard Error: 6_074
			.saturating_add(Weight::from_parts(4_702_128, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2719).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `788 + r * (6 ±0)`
		//  Estimated: `6730 + r * (6 ±0)`
		// Minimum execution time: 347_700_000 picoseconds.
		Weight::from_parts(358_685_044, 6730)
			// Standard Error: 513
			.saturating_add(Weight::from_parts(450_253, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (3 ±0)`
		//  Estimated: `6723 + r * (3 ±0)`
		// Minimum execution time: 338_168_000 picoseconds.
		Weight::from_parts(354_071_257, 6723)
			// Standard Error: 326
			.saturating_add(Weight::from_parts(193_608, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller_is_root(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `668 + r * (3 ±0)`
		//  Estimated: `6608 + r * (3 ±0)`
		// Minimum execution time: 326_563_000 picoseconds.
		Weight::from_parts(340_265_212, 6608)
			// Standard Error: 325
			.saturating_add(Weight::from_parts(170_672, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_address(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `782 + r * (6 ±0)`
		//  Estimated: `6724 + r * (6 ±0)`
		// Minimum execution time: 343_057_000 picoseconds.
		Weight::from_parts(356_255_155, 6724)
			// Standard Error: 807
			.saturating_add(Weight::from_parts(362_939, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (6 ±0)`
		//  Estimated: `6719 + r * (6 ±0)`
		// Minimum execution time: 343_528_000 picoseconds.
		Weight::from_parts(357_742_113, 6719)
			// Standard Error: 611
			.saturating_add(Weight::from_parts(561_885, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `922 + r * (6 ±0)`
		//  Estimated: `6846 + r * (6 ±0)`
		// Minimum execution time: 341_905_000 picoseconds.
		Weight::from_parts(375_082_439, 6846)
			// Standard Error: 3_803
			.saturating_add(Weight::from_parts(1_668_755, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `792 + r * (6 ±0)`
		//  Estimated: `6741 + r * (6 ±0)`
		// Minimum execution time: 340_647_000 picoseconds.
		Weight::from_parts(358_078_522, 6741)
			// Standard Error: 962
			.saturating_add(Weight::from_parts(349_961, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790 + r * (6 ±0)`
		//  Estimated: `6739 + r * (6 ±0)`
		// Minimum execution time: 342_314_000 picoseconds.
		Weight::from_parts(363_920_355, 6739)
			// Standard Error: 694
			.saturating_add(Weight::from_parts(340_575, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787 + r * (6 ±0)`
		//  Estimated: `6737 + r * (6 ±0)`
		// Minimum execution time: 341_078_000 picoseconds.
		Weight::from_parts(353_726_745, 6737)
			// Standard Error: 709
			.saturating_add(Weight::from_parts(346_342, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_now(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (6 ±0)`
		//  Estimated: `6723 + r * (6 ±0)`
		// Minimum execution time: 344_314_000 picoseconds.
		Weight::from_parts(357_764_230, 6723)
			// Standard Error: 504
			.saturating_add(Weight::from_parts(347_089, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// Proof: TransactionPayment NextFeeMultiplier (max_values: Some(1), max_size: Some(16), added: 511, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `852 + r * (14 ±0)`
		//  Estimated: `6785 + r * (14 ±0)`
		// Minimum execution time: 341_655_000 picoseconds.
		Weight::from_parts(372_186_405, 6785)
			// Standard Error: 1_225
			.saturating_add(Weight::from_parts(1_515_085, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 14).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `745 + r * (4 ±0)`
		//  Estimated: `6687 + r * (4 ±0)`
		// Minimum execution time: 169_950_000 picoseconds.
		Weight::from_parts(185_946_462, 6687)
			// Standard Error: 342
			.saturating_add(Weight::from_parts(147_677, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780 + r * (6 ±0)`
		//  Estimated: `6724 + r * (6 ±0)`
		// Minimum execution time: 344_778_000 picoseconds.
		Weight::from_parts(362_555_199, 6724)
			// Standard Error: 412
			.saturating_add(Weight::from_parts(287_182, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_input_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `784`
		//  Estimated: `6724`
		// Minimum execution time: 345_057_000 picoseconds.
		Weight::from_parts(307_695_645, 6724)
			// Standard Error: 24
			.saturating_add(Weight::from_parts(1_124, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `768 + r * (45 ±0)`
		//  Estimated: `6708 + r * (45 ±0)`
		// Minimum execution time: 335_253_000 picoseconds.
		Weight::from_parts(349_912_075, 6708)
			// Standard Error: 906_548
			.saturating_add(Weight::from_parts(4_851_224, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_return_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778`
		//  Estimated: `6731`
		// Minimum execution time: 341_257_000 picoseconds.
		Weight::from_parts(352_044_939, 6731)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(267, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts DeletionQueueCounter (r:1 w:1)
	/// Proof: Contracts DeletionQueueCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts DeletionQueue (r:0 w:1)
	/// Proof: Contracts DeletionQueue (max_values: None, max_size: Some(142), added: 2617, mode: Measured)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `810 + r * (356 ±0)`
		//  Estimated: `6750 + r * (7781 ±0)`
		// Minimum execution time: 339_648_000 picoseconds.
		Weight::from_parts(353_307_485, 6750)
			// Standard Error: 850_170
			.saturating_add(Weight::from_parts(140_793_614, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((8_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 7781).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_random(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `825 + r * (10 ±0)`
		//  Estimated: `6769 + r * (10 ±0)`
		// Minimum execution time: 346_576_000 picoseconds.
		Weight::from_parts(363_777_038, 6769)
			// Standard Error: 2_162
			.saturating_add(Weight::from_parts(2_026_896, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `778 + r * (10 ±0)`
		//  Estimated: `6723 + r * (10 ±0)`
		// Minimum execution time: 337_852_000 picoseconds.
		Weight::from_parts(360_199_971, 6723)
			// Standard Error: 3_597
			.saturating_add(Weight::from_parts(4_033_875, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:6 w:6)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16384]`.
	fn seal_deposit_event_per_topic_and_byte(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `797 + t * (32 ±0)`
		//  Estimated: `6744 + t * (2508 ±0)`
		// Minimum execution time: 362_333_000 picoseconds.
		Weight::from_parts(362_030_227, 6744)
			// Standard Error: 84_170
			.saturating_add(Weight::from_parts(3_056_095, 0).saturating_mul(t.into()))
			// Standard Error: 23
			.saturating_add(Weight::from_parts(875, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2508).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `777 + r * (7 ±0)`
		//  Estimated: `6721 + r * (7 ±0)`
		// Minimum execution time: 183_010_000 picoseconds.
		Weight::from_parts(192_453_803, 6721)
			// Standard Error: 1_387
			.saturating_add(Weight::from_parts(265_470, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 7).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_debug_message_per_byte(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `125728`
		//  Estimated: `131670`
		// Minimum execution time: 494_600_000 picoseconds.
		Weight::from_parts(464_686_074, 131670)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(1_085, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `845 + r * (292 ±0)`
		//  Estimated: `843 + r * (293 ±0)`
		// Minimum execution time: 343_761_000 picoseconds.
		Weight::from_parts(256_568_537, 843)
			// Standard Error: 10_189
			.saturating_add(Weight::from_parts(6_958_654, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 293).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_set_storage_per_new_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1304`
		//  Estimated: `1280`
		// Minimum execution time: 365_932_000 picoseconds.
		Weight::from_parts(411_656_757, 1280)
			// Standard Error: 66
			.saturating_add(Weight::from_parts(871, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_set_storage_per_old_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1167 + n * (1 ±0)`
		//  Estimated: `1167 + n * (1 ±0)`
		// Minimum execution time: 363_624_000 picoseconds.
		Weight::from_parts(378_169_815, 1167)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(169, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `841 + r * (288 ±0)`
		//  Estimated: `845 + r * (289 ±0)`
		// Minimum execution time: 343_365_000 picoseconds.
		Weight::from_parts(263_636_149, 845)
			// Standard Error: 9_614
			.saturating_add(Weight::from_parts(6_807_182, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 289).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_clear_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1163 + n * (1 ±0)`
		//  Estimated: `1163 + n * (1 ±0)`
		// Minimum execution time: 362_876_000 picoseconds.
		Weight::from_parts(375_291_483, 1163)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(201, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `835 + r * (296 ±0)`
		//  Estimated: `840 + r * (297 ±0)`
		// Minimum execution time: 346_185_000 picoseconds.
		Weight::from_parts(277_964_777, 840)
			// Standard Error: 8_452
			.saturating_add(Weight::from_parts(5_716_692, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_get_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1179 + n * (1 ±0)`
		//  Estimated: `1179 + n * (1 ±0)`
		// Minimum execution time: 364_885_000 picoseconds.
		Weight::from_parts(376_138_678, 1179)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(706, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `856 + r * (288 ±0)`
		//  Estimated: `857 + r * (289 ±0)`
		// Minimum execution time: 343_021_000 picoseconds.
		Weight::from_parts(281_839_963, 857)
			// Standard Error: 7_773
			.saturating_add(Weight::from_parts(5_473_569, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 289).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_contains_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1166 + n * (1 ±0)`
		//  Estimated: `1166 + n * (1 ±0)`
		// Minimum execution time: 360_210_000 picoseconds.
		Weight::from_parts(371_951_293, 1166)
			// Standard Error: 28
			.saturating_add(Weight::from_parts(220, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `829 + r * (296 ±0)`
		//  Estimated: `836 + r * (297 ±0)`
		// Minimum execution time: 345_122_000 picoseconds.
		Weight::from_parts(263_433_243, 836)
			// Standard Error: 9_685
			.saturating_add(Weight::from_parts(6_994_760, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_take_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1180 + n * (1 ±0)`
		//  Estimated: `1180 + n * (1 ±0)`
		// Minimum execution time: 369_389_000 picoseconds.
		Weight::from_parts(381_895_101, 1180)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(681, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: System Account (r:1602 w:1601)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1373 + r * (45 ±0)`
		//  Estimated: `7270 + r * (2520 ±0)`
		// Minimum execution time: 343_451_000 picoseconds.
		Weight::from_parts(283_678_253, 7270)
			// Standard Error: 50_252
			.saturating_add(Weight::from_parts(41_627_199, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2520).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:801 w:801)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:803 w:803)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1140 + r * (276 ±0)`
		//  Estimated: `9332 + r * (2752 ±0)`
		// Minimum execution time: 346_237_000 picoseconds.
		Weight::from_parts(353_690_000, 9332)
			// Standard Error: 84_914
			.saturating_add(Weight::from_parts(317_964_949, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2752).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:736 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:737 w:737)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (502 ±0)`
		//  Estimated: `6727 + r * (2572 ±3)`
		// Minimum execution time: 344_551_000 picoseconds.
		Weight::from_parts(351_310_000, 6727)
			// Standard Error: 104_797
			.saturating_add(Weight::from_parts(312_797_542, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2572).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:3 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:2 w:2)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:4 w:4)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1048576]`.
	fn seal_call_per_transfer_clone_byte(t: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1154 + t * (204 ±0)`
		//  Estimated: `12044 + t * (5154 ±0)`
		// Minimum execution time: 546_476_000 picoseconds.
		Weight::from_parts(167_526_004, 12044)
			// Standard Error: 11_607_363
			.saturating_add(Weight::from_parts(354_398_197, 0).saturating_mul(t.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(1_111, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 5154).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1602 w:1602)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:801 w:801)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:801 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:800 w:800)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:802 w:802)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 800]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1322 + r * (254 ±0)`
		//  Estimated: `7146 + r * (5205 ±0)`
		// Minimum execution time: 819_009_000 picoseconds.
		Weight::from_parts(826_287_000, 7146)
			// Standard Error: 352_432
			.saturating_add(Weight::from_parts(471_664_260, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((5_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 5205).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:2 w:2)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 983040]`.
	/// The range of component `s` is `[0, 983040]`.
	fn seal_instantiate_per_transfer_input_salt_byte(t: u32, i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1071 + t * (187 ±0)`
		//  Estimated: `9492 + t * (2634 ±2)`
		// Minimum execution time: 2_381_696_000 picoseconds.
		Weight::from_parts(1_310_635_659, 9492)
			// Standard Error: 12_530_352
			.saturating_add(Weight::from_parts(61_252_725, 0).saturating_mul(t.into()))
			// Standard Error: 19
			.saturating_add(Weight::from_parts(1_013, 0).saturating_mul(i.into()))
			// Standard Error: 19
			.saturating_add(Weight::from_parts(1_249, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2634).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `777 + r * (8 ±0)`
		//  Estimated: `6718 + r * (8 ±0)`
		// Minimum execution time: 344_201_000 picoseconds.
		Weight::from_parts(357_439_702, 6718)
			// Standard Error: 440
			.saturating_add(Weight::from_parts(414_484, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_sha2_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `785`
		//  Estimated: `6725`
		// Minimum execution time: 344_074_000 picoseconds.
		Weight::from_parts(341_708_846, 6725)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_151, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `779 + r * (8 ±0)`
		//  Estimated: `6721 + r * (8 ±0)`
		// Minimum execution time: 340_127_000 picoseconds.
		Weight::from_parts(356_666_974, 6721)
			// Standard Error: 411
			.saturating_add(Weight::from_parts(810_994, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `6729`
		// Minimum execution time: 344_062_000 picoseconds.
		Weight::from_parts(352_147_271, 6729)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(3_409, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `779 + r * (8 ±0)`
		//  Estimated: `6724 + r * (8 ±0)`
		// Minimum execution time: 340_766_000 picoseconds.
		Weight::from_parts(353_908_780, 6724)
			// Standard Error: 496
			.saturating_add(Weight::from_parts(489_280, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `6733`
		// Minimum execution time: 343_585_000 picoseconds.
		Weight::from_parts(346_684_695, 6733)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_248, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `779 + r * (8 ±0)`
		//  Estimated: `6725 + r * (8 ±0)`
		// Minimum execution time: 341_778_000 picoseconds.
		Weight::from_parts(355_943_845, 6725)
			// Standard Error: 379
			.saturating_add(Weight::from_parts(473_123, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_128_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `6727`
		// Minimum execution time: 347_282_000 picoseconds.
		Weight::from_parts(340_858_747, 6727)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_259, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 125697]`.
	fn seal_sr25519_verify_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `912 + n * (1 ±0)`
		//  Estimated: `6848 + n * (1 ±0)`
		// Minimum execution time: 415_285_000 picoseconds.
		Weight::from_parts(423_037_530, 6848)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(5_904, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_sr25519_verify(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `726 + r * (112 ±0)`
		//  Estimated: `6666 + r * (112 ±0)`
		// Minimum execution time: 343_521_000 picoseconds.
		Weight::from_parts(375_684_879, 6666)
			// Standard Error: 8_578
			.saturating_add(Weight::from_parts(57_306_263, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 112).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `822 + r * (76 ±0)`
		//  Estimated: `6716 + r * (77 ±0)`
		// Minimum execution time: 345_017_000 picoseconds.
		Weight::from_parts(388_197_156, 6716)
			// Standard Error: 12_060
			.saturating_add(Weight::from_parts(46_052_704, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `792 + r * (42 ±0)`
		//  Estimated: `6731 + r * (42 ±0)`
		// Minimum execution time: 343_939_000 picoseconds.
		Weight::from_parts(363_918_148, 6731)
			// Standard Error: 5_726
			.saturating_add(Weight::from_parts(11_855_261, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1536 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1536 w:1536)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1538 w:1538)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (964 ±0)`
		//  Estimated: `8190 + r * (3090 ±7)`
		// Minimum execution time: 342_253_000 picoseconds.
		Weight::from_parts(349_104_000, 8190)
			// Standard Error: 41_317
			.saturating_add(Weight::from_parts(23_556_889, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 3090).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `773 + r * (3 ±0)`
		//  Estimated: `6723 + r * (3 ±0)`
		// Minimum execution time: 340_928_000 picoseconds.
		Weight::from_parts(354_703_936, 6723)
			// Standard Error: 424
			.saturating_add(Weight::from_parts(185_100, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1975 + r * (39 ±0)`
		//  Estimated: `7805 + r * (40 ±0)`
		// Minimum execution time: 343_620_000 picoseconds.
		Weight::from_parts(392_538_877, 7805)
			// Standard Error: 818
			.saturating_add(Weight::from_parts(278_290, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_instantiation_nonce(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776 + r * (3 ±0)`
		//  Estimated: `6723 + r * (3 ±0)`
		// Minimum execution time: 345_881_000 picoseconds.
		Weight::from_parts(358_420_067, 6723)
			// Standard Error: 319
			.saturating_add(Weight::from_parts(156_154, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_668_000 picoseconds.
		Weight::from_parts(1_868_989, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_177, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_180_000 picoseconds.
		Weight::from_parts(2_587_524, 0)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(8_052, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_141_000 picoseconds.
		Weight::from_parts(2_501_785, 0)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(8_012, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_select(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_680_000 picoseconds.
		Weight::from_parts(2_052_116, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(11_581, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_570_000 picoseconds.
		Weight::from_parts(1_905_734, 0)
			// Standard Error: 23
			.saturating_add(Weight::from_parts(16_371, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_678_000 picoseconds.
		Weight::from_parts(2_080_833, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(7_728, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_600_000 picoseconds.
		Weight::from_parts(1_726_421, 0)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(12_472, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_676_000 picoseconds.
		Weight::from_parts(2_017_096, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(15_246, 0).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_695_000 picoseconds.
		Weight::from_parts(1_930_062, 0)
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_651_000 picoseconds.
		Weight::from_parts(2_121_499, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(18_801, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_024_000 picoseconds.
		Weight::from_parts(2_697_083, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(25_870, 0).saturating_mul(r.into()))
	}
	/// The range of component `l` is `[0, 1024]`.
	fn instr_call_per_local(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_716_000 picoseconds.
		Weight::from_parts(1_995_789, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(2_676, 0).saturating_mul(l.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_346_000 picoseconds.
		Weight::from_parts(4_605_068, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_215, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_404_000 picoseconds.
		Weight::from_parts(4_697_493, 0)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(5_537, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_388_000 picoseconds.
		Weight::from_parts(4_718_759, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(7_604, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_813_000 picoseconds.
		Weight::from_parts(2_168_184, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(9_281, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_783_000 picoseconds.
		Weight::from_parts(2_303_511, 0)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(9_625, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_116_000 picoseconds.
		Weight::from_parts(2_507_015, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(5_582, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 16]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_707_000 picoseconds.
		Weight::from_parts(990_556, 0)
			// Standard Error: 139_155
			.saturating_add(Weight::from_parts(18_600_506, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_702_000 picoseconds.
		Weight::from_parts(1_913_113, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_058, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_635_000 picoseconds.
		Weight::from_parts(1_888_810, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_066, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_614_000 picoseconds.
		Weight::from_parts(1_859_500, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(6_080, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_655_000 picoseconds.
		Weight::from_parts(1_907_535, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_090, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_588_000 picoseconds.
		Weight::from_parts(1_916_999, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(6_118, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_633_000 picoseconds.
		Weight::from_parts(1_911_425, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_098, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_608_000 picoseconds.
		Weight::from_parts(1_811_044, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(6_073, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_677_000 picoseconds.
		Weight::from_parts(1_929_457, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(8_925, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_632_000 picoseconds.
		Weight::from_parts(1_960_901, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(8_488, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_628_000 picoseconds.
		Weight::from_parts(1_979_142, 0)
			// Standard Error: 35
			.saturating_add(Weight::from_parts(8_314, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_602_000 picoseconds.
		Weight::from_parts(1_963_485, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(8_387, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_537_000 picoseconds.
		Weight::from_parts(1_964_507, 0)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(8_445, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_685_000 picoseconds.
		Weight::from_parts(1_902_057, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(8_903, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_615_000 picoseconds.
		Weight::from_parts(1_915_990, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(8_539, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_570_000 picoseconds.
		Weight::from_parts(2_120_953, 0)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(8_324, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_611_000 picoseconds.
		Weight::from_parts(2_070_405, 0)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(8_423, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_665_000 picoseconds.
		Weight::from_parts(1_986_591, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(8_894, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_612_000 picoseconds.
		Weight::from_parts(1_924_368, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_544, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_624_000 picoseconds.
		Weight::from_parts(1_961_302, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_503, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_653_000 picoseconds.
		Weight::from_parts(1_985_918, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_493, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_607_000 picoseconds.
		Weight::from_parts(1_950_489, 0)
			// Standard Error: 43
			.saturating_add(Weight::from_parts(7_859, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_636_000 picoseconds.
		Weight::from_parts(2_317_588, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(7_600, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_605_000 picoseconds.
		Weight::from_parts(2_280_861, 0)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(7_853, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_624_000 picoseconds.
		Weight::from_parts(2_271_172, 0)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(7_449, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_638_000 picoseconds.
		Weight::from_parts(1_851_086, 0)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(8_574, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_638_000 picoseconds.
		Weight::from_parts(1_986_255, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_644, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_584_000 picoseconds.
		Weight::from_parts(2_025_758, 0)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(8_559, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_728_000 picoseconds.
		Weight::from_parts(1_983_576, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_555, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_669_000 picoseconds.
		Weight::from_parts(1_973_175, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_518, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_670_000 picoseconds.
		Weight::from_parts(1_863_441, 0)
			// Standard Error: 18
			.saturating_add(Weight::from_parts(8_619, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_578_000 picoseconds.
		Weight::from_parts(1_980_063, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_525, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_596_000 picoseconds.
		Weight::from_parts(1_961_053, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(8_529, 0).saturating_mul(r.into()))
	}
}
